{"version":3,"sources":["stateful/molecules/GeoMap.js","base/WWW.js","core/custom_data/LKVaxCenters.js","stateful/pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["DEFAULT_CENTER","GeoMap","MapContainer","center","zoom","TileLayer","url","this","props","children","Component","WWW","fetch","response","text","content","lines","split","keys","dataList","slice","map","line","values","reduce","data","key","i","console","debug","length","LKVaxCenters","tsv","renderLayer","layer","layerItem","position","parseFloat","lat","lng","Circle","radius","Popup","formatted_address","police","district","HomePage","state","customerLayers","a","get","lkVaxCenters","setState","log","renderedLayers","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAKMA,EAAiB,CAAC,OAAQ,SAIXC,E,4JACnB,WACE,OACE,eAACC,EAAA,EAAD,CAAcC,OAAQH,EAAgBI,KANvB,GAMf,UACE,cAACC,EAAA,EAAD,CAAWC,IANA,uDAOVC,KAAKC,MAAMC,gB,GALgBC,aCRfC,E,+HAClB,WAAiBL,GAAjB,+FACwBM,MAAMN,GAD9B,cACOO,EADP,gBAGuBA,EAASC,OAHhC,cAGOC,EAHP,OAIOC,EAAQD,EAAQE,MAAM,MACtBC,EAAOF,EAAM,GAAGC,MAAM,MACtBE,EAAWH,EAAMI,MAAM,GAAI,GAAGC,KAClC,SAASC,GACP,IAAMC,EAASD,EAAKL,MAAM,MAC1B,OAAOC,EAAKM,QACV,SAASC,EAAMC,EAAKC,GAElB,OADAF,EAAKC,GAAOH,EAAOI,GACZF,IAET,OAKNG,QAAQC,MAAR,eAAsBV,EAASW,OAA/B,sBAAmDxB,IAnBpD,kBAoBQa,GApBR,4C,8DCIkBY,E,+HACnB,8FACepB,EAAIqB,IANF,4FAKjB,mF,6ECAF,SAASC,EAAYC,GACnB,OAAOA,EAAMb,KACX,SAASc,GACP,IAAMC,EAAW,CACbC,WAAWF,EAAUG,KACrBD,WAAWF,EAAUI,MAEzB,OACE,cAACC,EAAA,EAAD,CAAQrC,OAAQiC,EAAUK,OAVL,IAUrB,SACE,eAACC,EAAA,EAAD,WACE,6BAAKP,EAAUhC,SACf,8BAAMgC,EAAUQ,oBAChB,sCACA,gCAAK,2CAAYR,EAAUS,OAAtB,OAAL,iBACA,gCAAK,2CAAYT,EAAUU,SAAtB,OAAL,sB,IAQSC,E,kDAEnB,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IACDuC,MAAQ,CAACC,eAAgB,IAFb,E,4FAKnB,4BAAAC,EAAA,sEAC6BlB,EAAamB,MAD1C,OACQC,EADR,OAEE5C,KAAK6C,SAAS,CAACJ,eAAgB,CAACG,KAFlC,gD,0EAKA,WACEvB,QAAQyB,IAAI9C,KAAKwC,OACjB,IAAMO,EAAiB/C,KAAKwC,MAAMC,eAAe3B,IAAIY,GAErD,OACE,cAAC,EAAD,UACGqB,Q,GAlB6B5C,aCnBvB6C,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b72a17a.chunk.js","sourcesContent":["import react, {Component} from 'react';\nimport {MapContainer, TileLayer, Marker} from 'react-leaflet';\n\nimport './GeoMap.css';\n\nconst DEFAULT_CENTER = [6.9271, 79.8612];\nconst DEFAULT_ZOOM = 16;\nconst URL_FORMAT = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\nexport default class GeoMap extends Component {\n  render() {\n    return (\n      <MapContainer center={DEFAULT_CENTER} zoom={DEFAULT_ZOOM}>\n        <TileLayer url={URL_FORMAT} />\n        {this.props.children}\n      </MapContainer>\n    );\n  }\n}\n","\nexport default class WWW {\n   static async tsv(url) {\n    const response = await fetch(url);\n\n    const content = await response.text();\n    const lines = content.split('\\n');\n    const keys = lines[0].split('\\t');\n    const dataList = lines.slice(1, -1).map(\n      function(line) {\n        const values = line.split('\\t');\n        return keys.reduce(\n          function(data, key, i) {\n            data[key] = values[i];\n            return data;\n          },\n          {},\n        )\n      }\n    );\n\n    console.debug(`Read ${dataList.length} rows from ${url}`);\n    return dataList;\n  }\n}\n","import WWW from '../../base/WWW.js';\n\nconst REMOTE_URL = 'https://raw.githubusercontent.com'\n  + '/nuuuwan/covid19/data'\n  + '/covid19.lk_vax_centers.latest.tsv';\n\nexport default class LKVaxCenters {\n  static async get() {\n    return await WWW.tsv(REMOTE_URL);\n  }\n}\n","import react, {Component} from 'react';\nimport GeoMap from '../molecules/GeoMap.js';\nimport LKVaxCenters from '../../core/custom_data/LKVaxCenters.js';\nimport {Circle, Popup} from 'react-leaflet';\n\nconst DEFAULT_CIRLE_RADIUS = 200;\n\nfunction renderLayer(layer) {\n  return layer.map(\n    function(layerItem) {\n      const position = [\n          parseFloat(layerItem.lat),\n          parseFloat(layerItem.lng),\n      ];\n      return (\n        <Circle center={position} radius={DEFAULT_CIRLE_RADIUS}>\n          <Popup>\n            <h3>{layerItem.center}</h3>\n            <div>{layerItem.formatted_address}</div>\n            <div>...</div>\n            <div><strong>{`${layerItem.police} `}</strong>Police Area</div>\n            <div><strong>{`${layerItem.district} `}</strong>District</div>\n          </Popup>\n        </Circle>\n      );\n    }\n  )\n}\n\nexport default class HomePage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {customerLayers: []};\n  }\n\n  async componentDidMount() {\n    const lkVaxCenters = await LKVaxCenters.get();\n    this.setState({customerLayers: [lkVaxCenters]});\n  }\n\n  render() {\n    console.log(this.state);\n    const renderedLayers = this.state.customerLayers.map(renderLayer)\n\n    return (\n      <GeoMap>\n        {renderedLayers}\n      </GeoMap>\n    );\n  }\n}\n","import './App.css';\n\nimport HomePage from './stateful/pages/HomePage.js';\n\nfunction App() {\n  return (\n    <HomePage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}